class MutationsController < ApplicationController

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# Mutation: Tree | New | Clone | Move | Destroy # layouts/mutations/menu
#
# New: Root | Parent | Current | Child # layouts/mutatons/new
# Clone Current: Complete | One # layouts/mutations/clone
# Move Current: Complete | One # layouts/mutations/move
# Destroy Current: Complete | One # layouts/mutations/destroy
#
# Clone to: Root | Parent | Current | Child | Cancel # layouts/mutations/clone_to
# Clone uni to: Root | Parent | Current | Child | Cancel # layouts/mutations/clone_uni_to
# Move to: Root | Parent | Current | Child | Cancel # layouts/mutations/move_to
# Move uni to: Root | Parent | Current | Child | Cancel # layouts/mutations/move_uni_to
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *basics
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def index
    @mutations = Mutation.all
  end
  
  def show
    get_mutations
  end
   
  def new
    @no_links = true
    @mutation = Mutation.new
    @mutation.mutation_id = params[:mutation_id]
  end
  
  def create
    @mutation = Mutation.new(params[:mutation])
    if @mutation.save
      flash[:notice] = "Successfully created mutation."
      redirect_to @mutation
    else
      render :action => 'new'
    end
  end
  
  def edit
    @mutation = Mutation.find(params[:id])
  end
  
  def update
    @mutation = Mutation.find(params[:id])
    if @mutation.update_attributes(params[:mutation])
      flash[:notice] = "Successfully updated mutation."
      redirect_to @mutation
    else
      render :action => 'edit'
    end
  end
  
  def destroy
    get_mutations
    @mutation.destroy
    flash_success
    redirect_to @mutation_parent||mutations_path
  end


# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *save 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def save_new
    if @mutation_new.save
      flash_success
      redirect_to @mutation_new
    else
      flash_fail
      redirect_to @mutation
    end
  end

  def save_clone
    if @mutation_clone.save
      flash_success
      session[:mutation_clone_id] = nil
      redirect_to @mutation_clone
    else
      flash_fail
      redirect_to @mutation
    end
  end
  def save_clone_uni
    if @mutation_clone_uni.save
      flash_success
      session[:mutation_clone_uni_id] = nil
      redirect_to @mutation_clone_uni
    else
      flash_fail
      redirect_to @mutation
    end
  end

  def save_move
    if @mutation_move.save
      flash_success
      session[:mutation_move_id] = nil
      redirect_to @mutation_move
    else
      flash_fail
      redirect_to @mutation
    end
  end
  def save_move_uni
    if @mutation_move_uni.save
      flash_success
      session[:mutation_move_uni_id] = nil
      redirect_to @mutation_move_uni
    else
      flash_fail
      redirect_to @mutation
    end
  end
  

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *new
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def new_root
    get_mutations
    @mutation_new = Mutation.new
    place_at_root @mutation_new
    save_new
  end
  def new_parent
    get_mutations
    @mutation_new = Mutation.new
    place_at_parent @mutation_new
    save_new
  end
  def new_current
    get_mutations
    @mutation_new = Mutation.new
    place_at_current @mutation_new
    save_new
  end
  def new_children
    get_mutations
    @mutation_new = Mutation.new
    @mutation_new.save
    place_at_children @mutation_new
    save_new
  end
  def new_child
    get_mutations
    @mutation_new = Mutation.new
    place_at_child @mutation_new
    save_new
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *set
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def set_clone
    get_mutations
    session[:mutation_clone_id] = @mutation.id # set clone
    redirect_to @mutation # redirect to current
  end
  def set_clone_uni
    get_mutations
    session[:mutation_clone_uni_id] = @mutation.id # set clone uni
    redirect_to @mutation # redirect to current
  end
  def set_move
    get_mutations
    session[:mutation_move_id] = @mutation.id # set move
    redirect_to @mutation # redirect to current
  end
  def set_move_uni
    get_mutations
    session[:mutation_move_uni_id] = @mutation.id # set move uni
    redirect_to @mutation # redirect to current
  end

  def move_to_move_uni
    session[:mutation_move_uni_id] = session[:mutation_move_id] # set uni to normal
    session[:mutation_move_id] = nil # nil normal
    redirect_to :action => 'show', :id => params[:id] # redirect to show and pass along id
  end

  def move_uni_to_move
    session[:mutation_move_id] = session[:mutation_move_uni_id] # set uni to normal
    session[:mutation_move_uni_id] = nil # nil normal
    redirect_to :action => 'show', :id => params[:id] # redirect to show and pass along id
  end

  def clone_to_clone_uni
    session[:mutation_clone_uni_id] = session[:mutation_clone_id] # set uni to normal
    session[:mutation_clone_id] = nil # nil normal
    redirect_to :action => 'show', :id => params[:id] # redirect to show and pass along id
  end

  def clone_uni_to_clone
    session[:mutation_clone_id] = session[:mutation_clone_uni_id] # set uni to normal
    session[:mutation_clone_uni_id] = nil # nil normal
    redirect_to :action => 'show', :id => params[:id] # redirect to show and pass along id
  end


# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *cancel
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def cancel_clone
    get_mutations
    session[:mutation_clone_id]=nil # clear session
    redirect_to @mutation # redirect to current
  end
  def cancel_clone_uni
    get_mutations
    session[:mutation_clone_uni_id]=nil # clear session
    redirect_to @mutation # redirect to current
  end
  def cancel_move
    get_mutations
    session[:mutation_move_id]=nil # clear session
    redirect_to @mutation # redirect to current
  end
  def cancel_move_uni
    get_mutations
    session[:mutation_move_uni_id]=nil # clear session
    redirect_to @mutation # redirect to current
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *clone
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def copy_over(pass1, pass2)
    #...
  end
  def clone_children(pass1, pass2)
    pass1.children.each do |mutation|
      mutation_new = Mutation.new
      copy_over mutation, mutation_new
      mutation_new.save
      attach_to mutation_new, pass2
      clone_children mutation, mutation_new
    end
  end

  def make_clone
    get_mutations
    mutation_new = Mutation.new
    mutation_new.save
    copy_over @mutation_clone, mutation_new
    clone_children @mutation_clone, mutation_new
    @mutation_clone = mutation_new
  end
  def make_clone_uni
    get_mutations
    mutation_clone_uni = Mutation.new
    copy_over mutation_clone_uni, @mutation_clone_uni
    @mutation_clone_uni = mutation_clone_uni
  end

  def clone_to_root
    make_clone
    place_at_root @mutation_clone
    save_clone
  end
  def clone_to_parent
    make_clone
    place_at_parent @mutation_clone
    save_clone
  end
  def clone_to_current
    make_clone
    place_at_current @mutation_clone
    save_clone
  end
  def clone_to_children
    make_clone
    place_at_children @mutation_clone
    save_clone
  end
  def clone_to_child
    make_clone
    place_at_child @mutation_clone
    save_clone
  end
  
  def clone_uni_to_root
    make_clone_uni
    place_at_root @mutation_clone_uni
    save_clone_uni
  end
  def clone_uni_to_parent
    make_clone_uni
    place_at_parent @mutation_clone_uni
    save_clone_uni
  end
  def clone_uni_to_current
    make_clone_uni
    place_at_current @mutation_clone_uni
    save_clone_uni
  end
  def clone_uni_to_children
    make_clone_uni
    place_at_children @mutation_clone_uni
    save_clone_uni
  end
  def clone_uni_to_child
    make_clone
    place_at_child @mutation_clone_uni
    save_clone
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *move
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def check_childship(pass1, pass2) # check for childship
    if pass1 == pass2 # if one equals two
      @child_or_current = true # childship false
    else
      check_childship_children pass1, pass2 # check children
    end
  end
  def check_childship_children(pass1, pass2)
    pass1.children.each do |child|
      if child == pass2
        @child_or_current = true
      end
      check_childship_children child, pass2
    end
  end
    
  def move_to_root
    get_mutations
    place_at_root @mutation_move
    save_move
  end
  def move_to_parent
    get_mutations
    place_at_parent @mutation_move
    save_move
  end
  def move_to_current
    get_mutations
    place_at_current @mutation_move
    save_move
  end
  def move_to_children
    get_mutations
    place_at_children @mutation_move
    save_move
  end
  def move_to_child
    get_mutations # get mutations
    place_at_child @mutation_move # place move at child position
    save_move # save move
  end

  def move_children_to(pass)
    @mutation.children.each do |child| # for children
      attach_to child, pass # attach child to pass
    end # end
  end

  def move_uni_to_root
    get_mutations
    isolate_mutation @mutation_move_uni
    place_at_root @mutation_move_uni
    save_move_uni
  end
  def move_uni_to_parent
    get_mutations
    isolate_mutation @mutation_move_uni
    place_at_parent @mutation_move_uni
    save_move_uni
  end
  def move_uni_to_current
    get_mutations
    isolate_mutation @mutation_move_uni
    place_at_current @mutation_move_uni
    save_move_uni
  end
  def move_uni_to_child
    get_mutations
    isolate_mutation @mutation_move_uni
    place_at_child @mutation_move_uni
    save_move_uni
  end
  def move_uni_to_children
    get_mutations
    isolate_mutation @mutation_move_uni
    place_at_children @mutation_move_uni
    save_move_uni
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *destroy
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def destroy
    get_mutations
    if @mutation.destroy
      flash_success
      if @mutation_parent
        redirect_to @mutation_parent
      else
        redirect_to :action => "index"
      end
    else
      flash_fail
      redirect_to @mutation
    end
  end 

# pass1 = the mutation that will be re-assigned
# pass2 = the mutation that will remain un-changed


# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *isolate 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def isolate_mutation(pass1)
    if pass1.mutation_id # if pass1 has parent
      pass1_parent = Mutation.find(pass1.mutation_id) # let pass1 parent be the pass1 parent
      attach_children_to pass1, pass1_parent # attach children of pass1 to pass1 parent
    else # pass1 is root
      for mutation in pass1.children
        mutation.mutation_id = nil
        mutation.save
      end
    end # end 
    pass1.mutation_id = nil
    pass1.save
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *place 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def place_at_root(pass)
    #pass.mutation_id = @mutation_root.mutation_id
    pass.mutation_id = nil
    pass.save
  end
  def place_at_parent(pass)
    if @mutation_parent # if parent
      attach_to pass, @mutation_parent # attach pass to parent
      pass.save # save pass
    else # else, root
      pass.mutation_id = nil # erase parent
      pass.save # save pass
    end # end
    attach_to @mutation, pass # attach mutation to pass
    @mutation.save # save mutation to new parent
  end
  def place_at_current(pass)
    if @mutation_parent # if parent 
      attach_to pass, @mutation_parent # attach pass to parent
    else # else, is root
      pass.mutation_id = nil # erase parent
    end # end 
    pass.save # save pass
  end
  def place_at_child(pass)
    attach_to pass, @mutation
    pass.save
  end
  def place_at_children(pass)
    move_children_to pass
    place_at_child pass
    pass.save
  end

 
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *attach 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def attach_to(pass1, pass2, pass2_is_super=false)
    if pass2_is_super
      pass1.mutation_id = nil
      pass1.mutation_id = pass2.id
      pass1.save
    else # pass2 is parent
      pass1.mutation_id = pass2.id
      #pass1.mutation_id = nil
      pass1.save
    end
  end
  def attach_children_to(pass1, pass2)
    for mutation in pass1.children # attach children to pass
      attach_to mutation, pass2 
    end
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *flash 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 

  def flash_success
    flash[:notice] = "Success" # flash success
  end
  def flash_fail
    flash[:error] = "Fail, try again" # flash fail
  end

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *function
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
 
  def start
    @mutation = Mutation.find(params[:id])
    @mutation.start_time = Time.now
    if @mutation.save
      flash[:notice] = "Successfully started mutation(#{@mutation.id}) at #{@mutation.start_time}"
      redirect_to @mutation
    else
      flash[:error] = "Sorry, try again."
      redirect_to @mutation
    end
  end 

# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 
#
# *get_mutations 
#
# ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** 


# get_mutations
## @mutation_super(if exists)
# @mutation_root
# @mutation_parent(if exists)
# @mutation
# @mutation_move(if exists)
# @mutation_move_uni(if exists)
# @mutation_clone(if exists)
# @mutation_clone_uni(if exists)

  def get_mutations(pass=params[:id])
    @mutation = Mutation.find(pass) # get current
    @mutation_root = @mutation.ancestors.last # get root
    #if @mutation.mutation_id
      #@mutation_super = Mutation.find(@mutation.mutation_id)
    #end # get super of current
    if @mutation.mutation_id
      @mutation_parent = Mutation.find(@mutation.mutation_id)
    end # get parent of current
    if session[:mutation_clone_id]
      @mutation_clone = Mutation.find(session[:mutation_clone_id]) 
    end # get clone_current from session
    if session[:mutation_clone_uni_id]
      @mutation_clone_uni = Mutation.find(session[:mutation_clone_uni_id]) 
    end # get clone_current_uni from session
    if session[:mutation_move_id]
      @mutation_move = Mutation.find(session[:mutation_move_id]) 
      if @mutation # if current
        check_childship @mutation_move, @mutation # check for childship
      end # end
    end # get move_current from session
    if session[:mutation_move_uni_id]
      @mutation_move_uni = Mutation.find(session[:mutation_move_uni_id]) 
      if @mutation # if current
        check_childship @mutation_move_uni, @mutation # check for childship
      end # end
    end
  end



end
