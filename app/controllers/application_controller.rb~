# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base

include ApplicationHelper

  helper :all # include all helpers, all the time
  protect_from_forgery # See ActionController::RequestForgeryProtection for details

  # Scrub sensitive parameters from your log
  # filter_parameter_logging :password

# ********* ********* ********* ********* ********* ********* ********* ********* *********
# *pioritizing
# ********* ********* ********* ********* ********* ********* ********* ********* *********

  # get prioritization with super id
  #   get super id
  #   pre prioritizations are objects with super id and ascending ancestorizations
  #   set prioritization with ready_to_prioritize
  # end
  def get_prioritization(thing_one)
    set_childless thing_one
    childless_thing_ones = thing_one.class.find(:all, :conditions => {:childless => true, :super_id => thing_one.super_id}, :order => "ancestorization ASC" )
    childless_thing_ones.each do |childless_thing_one|
      set_prioritization childless_thing_one
    end
  end

  # set prioritization with thing_one
  #   counter equals thing_one
  #   prioritization equals counter
  #   save
  #   for each ancestor
  #     advance counter
  #     pioritization equals counter
  #     save
  #   end
  # end
  def set_prioritization(childless_thing_one)
    counter = 1
    childless_thing_one.prioritization = counter
    childless_thing_one.save
    childless_thing_one.ancestors.each do |ancestor|
      counter = counter + 1
      ancestor.prioritization = counter
      ancestor.save
    end
  end

  # locate and get childless objects of passed object
  #   set childless status with pass
  #   set ancestorization with thing_one
  #   set super with thing_one
  #   if thing_one not childless, then
  #     for each child
  #       loop passing child
  #     end
  #   end
  # end
  def set_childless(thing_one) 
    check_childless_status thing_one 
    set_ancestorization thing_one
    if !thing_one.children.empty? 
      for child in thing_one.children		 
        set_childless child
      end
    end 
  end 

  # set childless state of passed object
  #   if childless, then
  #     childless is true
  #   else, not childless, so
  #     childless is false
  #   end
  #   save
  # end
  def check_childless_status(thing_one)
    if thing_one.children.empty? 	
      thing_one.childless = true 	
    else 			
      thing_one.childless = false 	
    end 		
    thing_one.save 		
  end 	

  # set ancestorization with passed object
  #   thing_one ancestorization is ancestor size
  #   save
  # end
  def set_ancestorization(thing_one)
    thing_one.ancestorization = thing_one.ancestors.size 
    thing_one.save 
  end



end
